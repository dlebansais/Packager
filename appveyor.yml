# version format
version: v{build}

branches:
  only:
    - master
    - deployment

# Skipping commits with particular message or from specific user
skip_commits:
  message: "*[skip ci]*"

image: Visual Studio 2022

# scripts that are called at very beginning, before repo cloning
init:
  - git config --global core.autocrlf input

environment:
  opencover_version: 4.7.1221
  codecov_uploader_version: 0.7.1
  report_generator_version: 5.2.0
  PACKAGE_PREFIX: dlebansais

matrix:
# set this flag to immediately finish build once one of the jobs fails.
  fast_finish: true

before_build:
  - nuget restore %APPVEYOR_PROJECT_NAME%.sln
  - nuget install dlebansais.GitCommitId -DependencyVersion Highest -OutputDirectory packages
  - dotnet restore

configuration:
  - Debug
  - Release

build:
  project: $(APPVEYOR_PROJECT_NAME).sln

after_build:
  - nuget install dlebansais.Packager -DependencyVersion Highest -OutputDirectory packages # Install Packager
  - ps: $folder = Get-ChildItem -Path packages/dlebansais.Packager.* -Name | Out-String    # Get the installation folder (we don't know the actual version)
  - ps: $firstline = ($folder -split '\r\n')[0]                                            # Get rid of carriage-return
  - ps: $fullpath = ".\packages\$firstline\lib\net481\Packager.exe"                        # Build full path
  - ps: $env:PACKAGER_PATH=$fullpath
  - '%PACKAGER_PATH% %CUSTOM_PACKAGER_OPTIONS% --prefix=%PACKAGE_PREFIX%'                  # Execute the packager: the output is nuget\%PACKAGE_PREFIX%.%APPVEYOR_PROJECT_NAME%.nuspec
  - if exist nuget\%PACKAGE_PREFIX%.%APPVEYOR_PROJECT_NAME%.nuspec nuget pack nuget\%PACKAGE_PREFIX%.%APPVEYOR_PROJECT_NAME%.nuspec
  - '%PACKAGER_PATH% %CUSTOM_PACKAGER_OPTIONS% --prefix=%PACKAGE_PREFIX% --debug'          # Execute the packager: the output is nuget-debug\%PACKAGE_PREFIX%.%APPVEYOR_PROJECT_NAME%-Debug.nuspec
  - if exist nuget-debug\%PACKAGE_PREFIX%.%APPVEYOR_PROJECT_NAME%-Debug.nuspec nuget pack nuget-debug\%PACKAGE_PREFIX%.%APPVEYOR_PROJECT_NAME%-Debug.nuspec
  - ps: $xml = [xml](Get-Content .\$env:APPVEYOR_PROJECT_NAME\$env:APPVEYOR_PROJECT_NAME.csproj)
  - ps: $version=$xml.Project.PropertyGroup.Version
  - ps: set version_tag v$version
  - ps: $version_tag=$version_tag.Trim()
  - ps: $env:VERSION_TAG=$version_tag
  - echo Version is "%VERSION_TAG%"

before_test:
  - nuget install OpenCover -Version %opencover_version% -OutputDirectory packages
  - nuget install CodecovUploader -Version %codecov_uploader_version% -OutputDirectory packages
  - nuget install ReportGenerator -Version %report_generator_version% -OutputDirectory packages
  - ps: $env:COVERAGE_RESULT_FILE="./Test/$env:APPVEYOR_PROJECT_NAME.Test/bin/x64/$env:CONFIGURATION/Coverage-$env:APPVEYOR_PROJECT_NAME.xml"
  - |-
    printf "dotnet test ./Test/%APPVEYOR_PROJECT_NAME%.Test/bin/x64/%CONFIGURATION%/net8.0-windows7.0/%APPVEYOR_PROJECT_NAME%.Test.dll -l console;verbosity=detailed --environment RESULTFILENAME=""../Coverage-%APPVEYOR_PROJECT_NAME%.xml""\n" > run-tests.bat
  - |-
    printf "@echo ************************************************************** Starting Tests..\n" > run-tests1.bat
    printf "call run-tests.bat\n" >> run-tests1.bat
  - |-
    printf ".\packages\CodecovUploader.%codecov_uploader_version%\Tools\Codecov.exe -f ""%COVERAGE_RESULT_FILE%""\n" > after-test.bat
    printf ".\packages\ReportGenerator.%report_generator_version%\Tools\Net8.0\ReportGenerator.exe ""-reports:%COVERAGE_RESULT_FILE%"" -targetdir:.\CoverageReports ""-assemblyfilters:-Microsoft*;+%APPVEYOR_PROJECT_NAME%"" ""-filefilters:-*.g.cs"" -reporttypes:textsummary\n" >> after-test.bat
    printf "powershell $summary = Get-Content .\CoverageReports\Summary.txt -Raw ; Write-Output $summary ; $pattern = 'Line coverage' + [char]0x003A + ' 100' ; if ($summary -NotMatch $pattern) { exit 0 }\n" >> after-test.bat
    printf "echo Copying file to fail if the file doesn't exist\n" >> after-test.bat
    printf "if errorlevel 0 copy .\CoverageReports\Summary.txt SummaryCopy.txt > nul\n" >> after-test.bat

test_script:
  - if '%APPVEYOR_REPO_BRANCH%' == 'master' call run-tests1.bat

after_test:
  - if '%APPVEYOR_REPO_BRANCH%' == 'master' call after-test.bat

artifacts:
  - path: $(APPVEYOR_PROJECT_NAME)/bin/x64/Release/net481/win-x64/$(APPVEYOR_PROJECT_NAME).exe
    name: $(APPVEYOR_PROJECT_NAME)
  - path: $(PACKAGE_PREFIX).$(APPVEYOR_PROJECT_NAME)-Debug.*.nupkg
    name: $(APPVEYOR_PROJECT_NAME)-Package-Debug
  - path: $(PACKAGE_PREFIX).$(APPVEYOR_PROJECT_NAME).*.nupkg
    name: $(APPVEYOR_PROJECT_NAME)-Package-Release
  - path: ./Test/$(APPVEYOR_PROJECT_NAME).Test/bin/x64/$(CONFIGURATION)/net8.0-windows7.0/output.txt
    name: $(CONFIGURATION)-output-txt
  - path: $(COVERAGE_RESULT_FILE)
    name: $(CONFIGURATION)-Coverage-Xml

deploy:
  - provider: GitHub
    release: $(VERSION_TAG)
    description: 'Automatic deployment'
    auth_token:
      secure: hjfTFfWeXzkCbwNb/qPmZik9szwztg8bDIxWAM70ZVhQLIIMhLXj9+zQEdovEUfk
    artifact: $(APPVEYOR_PROJECT_NAME)
    draft: false
    prerelease: false
    on:
      branch: deployment
      configuration: Release
  - provider: NuGet
    artifact: $(APPVEYOR_PROJECT_NAME)-Package-Release
    skip_symbols: true
    api_key:
      secure: Wrt1RLR81rx4nHwWR3jbGRqiaevBfViPxp9R08sRQKTQ24v6ZOiHcNHcBKZ8do4+
    on:
      branch: deployment
      configuration: Release
  - provider: NuGet
    server: https://nuget.pkg.github.com/dlebansais/index.json
    symbol_server: https://nuget.pkg.github.com/dlebansais/index.json
    artifact: $(APPVEYOR_PROJECT_NAME)-Package-Debug
    username: dlebansais
    api_key:
      secure: 5tcSRVegOcTQlDtIaRuucZxjxp4BmVhrdVoxJtejCcfsCmBV+ZwyfSXrlRsF9QxZ
    on:
      branch: deployment
      configuration: Debug
  - provider: NuGet
    server: https://nuget.pkg.github.com/dlebansais/index.json
    artifact: $(APPVEYOR_PROJECT_NAME)-Package-Release
    skip_symbols: true
    username: dlebansais
    api_key:
      secure: 5tcSRVegOcTQlDtIaRuucZxjxp4BmVhrdVoxJtejCcfsCmBV+ZwyfSXrlRsF9QxZ
    on:
      branch: deployment
      configuration: Release
